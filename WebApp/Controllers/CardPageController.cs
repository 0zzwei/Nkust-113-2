using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WebApp.Data;
using WebApp.Models;
using WebApp.Models.Dtos;
using AutoMapper;

namespace WebApp.Controllers
{
    public class CardPageController : Controller
    {
        private readonly AppDbContext _context;
        private readonly IMapper _mapper;

        public CardPageController(AppDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        // GET: CardPage
        public async Task<IActionResult> Index()
        {
            var cards = await _context.Cards.ToListAsync();
            var cardDtos = _mapper.Map<List<CardDto>>(cards);
            return View(cardDtos);
        }

        // GET: CardPage/Details/5
        public async Task<IActionResult> Details(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var card = await _context.Cards
                .Include(c => c.AccessGrants)
                .ThenInclude(ag => ag.Device)
                .FirstOrDefaultAsync(c => c.Id == id);

            if (card == null)
            {
                return NotFound();
            }
            var cardDto = _mapper.Map<CardDto>(card);
            return View(cardDto);
        }

        // GET: CardPage/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST: CardPage/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CreateCardDto createCardDto)
        {
            if (ModelState.IsValid)
            {
                var card = _mapper.Map<Card>(createCardDto);
                card.Id = Guid.NewGuid(); // Ensure new Guid is generated by server
                _context.Add(card);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(createCardDto);
        }

        // GET: CardPage/Edit/5
        public async Task<IActionResult> Edit(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var card = await _context.Cards.FindAsync(id);
            if (card == null)
            {
                return NotFound();
            }
            var updateCardDto = _mapper.Map<UpdateCardDto>(card);
            return View(updateCardDto);
        }

        // POST: CardPage/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(Guid id, UpdateCardDto updateCardDto)
        {
            // It's good practice to fetch the entity by id first, then map, then save.
            // This ensures you're working with the latest version from the DB
            // and helps prevent overwriting unintended changes if the DTO doesn't include all fields.
            var cardToUpdate = await _context.Cards.FindAsync(id);

            if (cardToUpdate == null)
            {
                return NotFound(); // Or handle as an error, e.g., return BadRequest("Card not found.");
            }

            if (ModelState.IsValid)
            {
                _mapper.Map(updateCardDto, cardToUpdate); // Apply changes from DTO to the fetched entity

                try
                {
                    _context.Update(cardToUpdate);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CardExists(id)) // Check using the original id
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            // If ModelState is invalid, it's usually best to return the DTO that failed validation,
            // so the view can repopulate the form with the user's input.
            return View(updateCardDto);
        }

        // GET: CardPage/Delete/5
        public async Task<IActionResult> Delete(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var card = await _context.Cards
                .FirstOrDefaultAsync(m => m.Id == id);
            if (card == null)
            {
                return NotFound();
            }
            var cardDto = _mapper.Map<CardDto>(card);
            return View(cardDto);
        }

        // POST: CardPage/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(Guid id)
        {
            var card = await _context.Cards.FindAsync(id);
            if (card != null)
            {
                _context.Cards.Remove(card);
                await _context.SaveChangesAsync();
            }

            return RedirectToAction(nameof(Index));
        }

        // GET: CardPage/ManageWhitelist/5
        public async Task<IActionResult> ManageWhitelist(Guid? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var card = await _context.Cards
                .Include(c => c.AccessGrants)
                .ThenInclude(ag => ag.Device)
                .FirstOrDefaultAsync(c => c.Id == id);

            if (card == null)
            {
                return NotFound();
            }

            var allDevices = await _context.Devices.ToListAsync();
            var cardDto = _mapper.Map<CardDto>(card); // Map card to CardDto
            var allDeviceDtos = _mapper.Map<List<DeviceDto>>(allDevices); // Map devices to DeviceDto

            var viewModel = new ManageWhitelistViewModel
            {
                Card = cardDto, // Use CardDto
                AllDevices = allDeviceDtos, // Use List<DeviceDto>
                SelectedDeviceIds = card.AccessGrants.Select(ag => ag.DeviceId).ToList()
            };

            return View(viewModel);
        }

        // POST: CardPage/ManageWhitelist/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> ManageWhitelist(Guid id, List<Guid> selectedDevices)
        {
            var card = await _context.Cards
                .Include(c => c.AccessGrants)
                .FirstOrDefaultAsync(c => c.Id == id);

            if (card == null)
            {
                return NotFound();
            }

            // 獲取目前卡片的所有授權
            var currentGrants = await _context.CardAccessGrants
                .Where(ag => ag.CardId == id)
                .ToListAsync();

            // 刪除不再被選中的授權
            var grantsToRemove = currentGrants
                .Where(g => !selectedDevices.Contains(g.DeviceId))
                .ToList();

            foreach (var grant in grantsToRemove)
            {
                _context.CardAccessGrants.Remove(grant);
            }

            // 添加新的授權
            foreach (var deviceId in selectedDevices)
            {
                if (!currentGrants.Any(g => g.DeviceId == deviceId))
                {
                    _context.CardAccessGrants.Add(new CardAccessGrant
                    {
                        Id = Guid.NewGuid(),
                        CardId = id,
                        DeviceId = deviceId,
                        Remark = "Added on " + DateTime.Now.ToString("yyyy-MM-dd")
                    });
                }
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Details), new { id = id });
        }

        private bool CardExists(Guid id)
        {
            return _context.Cards.Any(e => e.Id == id);
        }
    }    // 視圖模型
    public class ManageWhitelistViewModel
    {
        public required CardDto Card { get; set; } // Changed to CardDto
        public required List<DeviceDto> AllDevices { get; set; } // Changed to List<DeviceDto>
        public required List<Guid> SelectedDeviceIds { get; set; }
    }
}
